@isTest private class HyperDataOutboundTest { // Mock class to simulate HTTP response private class HyperDataMock implements HttpCalloutMock { public HTTPResponse respond(HTTPRequest req) { HttpResponse res = new HttpResponse(); res.setStatusCode(200); res.setBody('{"clientid": "12345","policy": "654321", "source_applications_name": "Web", "pref_lang_spoken": "english", "pref_lang_written": "english", "pref_mode": "any", "pref_time_slot": "4", "updated_date": "2025-10-23", "hyper_created_date": "2025-10-23"}'); return res; } } @isTest static void testDataUsingFromFlow() { // Prepare request data List<HyperDataOutbound.HyperDataRequestFlow> reqList = new List<HyperDataOutbound.HyperDataRequestFlow>(); HyperDataOutbound.HyperDataRequestFlow req = new HyperDataOutbound.HyperDataRequestFlow(); req.clientid = '2345532'; req.hyper_created_date = '2022-01-01'; req.policy = '5673355'; req.pref_lang_spoken = 'Hindi'; req.pref_lang_written = 'Hindi'; req.pref_mode = 'Email'; req.source_applications_name = 'Web'; req.pref_time_slot = '5'; req.updated_date = '2022-01-01'; req.recordId = 'valid_record_id'; reqList.add(req); // Set mock response Test.setMock(HttpCalloutMock.class, new HyperDataMock()); Test.startTest(); List<HyperDataOutbound.HyperDataResponseFlow> resList = HyperDataOutbound.dataUsingFromFlow(reqList); Test.stopTest(); // Assert response System.assertNotEquals(0, resList.size(), 'Response list should not be empty'); System.assertEquals('12345', resList[0].clientid, 'Client ID should match mock response'); } }