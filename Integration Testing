/** * This class contains unit tests for validating the behavior of Apex classes * and triggers. * 
* Unit tests are class methods that verify whether a particular piece * of code is working properly. Unit test methods take no arguments, * commit no data to the database, and are flagged with the testMethod * keyword in the method definition. * * All test methods in an org are executed whenever Apex code is deployed * to a production org to confirm correctness, ensure code * coverage, and prevent regressions. All Apex classes are * required to have at least 75% code coverage in order to be deployed * to a production org. In addition, all triggers must have some code coverage. * 
* The @isTest class annotation indicates this class only contains test * methods. Classes defined with the @isTest annotation do not count against * the org size limit for all Apex scripts. *
* See the Apex Language Reference for more information about Testing and Code Coverage. */
@isTest 
public class AppInfoProviderTest {
@TestSetup 
static void makeData()
{ 
Profile p = [SELECT Id from Profile where Name = 'System Administrator' Limit 1]; 
User u1 = new User(Alias = 't0', Email='standardusert0@indiafirstlife.com',AvailabilityStatus__c='Active',isActive=true, EmailEncodingKey='UTF-8', LastName='Testing1', LanguageLocaleKey='en_US',LocaleSidKey='en_US', ProfileId = p.Id, TimeZoneSidKey='America/Los_Angeles', UserName='standarduser0@testgmail2018.msm',EmployeeNumber = '123456');
insert u1; 
Id newBusinessRecordTypeId = Schema.SObjectType.Application__c.getRecordTypeInfosByName().get('New Business').getRecordTypeId();
Application__c app = new Application__c(); 
app.RecordTypeId = newBusinessRecordTypeId; 
app.Name = 'Test Application'; 
app.ApplicationNo__c = 'UZ1903352'; 
app.ApplicationStage__c = 'New Business';
app.ApplicationStatus__c = 'Open'; 
app.ApplicationSubStage__c = 'YTS1';
app.ContractNumber__c = '10012345';
// app.Decision__c = 'CFR';
app.OwnerId = u1.id;
insert app;
}
@isTest
static void CoveringAppInfo() { 
RestRequest req = new RestRequest();
RestResponse res = new RestResponse();
req.requestURI = '/appInfo'; 
req.httpMethod = 'Post'; 
req.addHeader('Content-Type', 'application/json'); 
String str = '{"appInfo": {"appNum":"UZ1903352"}}'; 
req.requestBody= Blob.valueOf(str); 
RestContext.request = req;
RestContext.response = res; 
Test.startTest(); 
AppInfoProviderIntegrator.appInfoProvider();
Test.stopTest(); 
}
@isTest
static void CoveringNegAppInfo() { RestRequest req = new RestRequest(); RestResponse res = new RestResponse(); req.requestURI = 'service/appInfo'; req.httpMethod = 'Post'; req.addHeader('Content-Type', 'application/json'); String str = '{"appInfo": {"appNum":"A02193555"}}'; req.requestBody= Blob.valueOf(str); RestContext.request = req; RestContext.response = res; Test.startTest(); AppInfoProviderIntegrator.appInfoProvider(); Test.stopTest(); } }
